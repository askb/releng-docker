---
name: Build and Run Docker Image

on:
  push:
    branches:
      - main
jobs:
  maven-verify:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.GERRIT_BRANCH }}
          repository: ${{ inputs.TARGET_REPO }}
          submodules: "true"
      - uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: "3.8"
      - name: Setup JDK ${{ inputs.JDK_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.JDK_VERSION }}
          distribution: 'oracle'
      - name: Setup Maven ${{ inputs.MVN_VERSION }}
        uses: thermofisher/setup-maven@v1.0.0
        with:
          maven-version: ${{ inputs.MVN_VERSION }}
      - name: Obtain global settings file
        # yamllint disable rule:line-length
        run: |
          if [[ "${{ vars.ORGANIZATION }}" == "opendaylight" ]]; then
              CI_REPO="releng-builder"
          else
              CI_REPO="ci-management"
          fi
          wget -q -O settings.xml "https://raw.githubusercontent.com/${{ vars.ORGANIZATION }}/${CI_REPO}/master/jenkins-config/managed-config-files/globalMavenSettings/global-settings/content"
        # yamllint enable rule:line-length
      - name: Build code with Maven
        uses: Best-Quality-Engineering/ci-maven-action@v1
        with:
          # yamllint disable-line rule:line-length
          phases: clean, install, dependency:tree
          settings-file: settings.xml
          # yamllint disable-line rule:line-length
          maven-opts: --show-version --batch-mode -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=/tmp/r -Dorg.ops4j.pax.url.mvn.localRepository=/tmp/r -DaltDeploymentRepository=staging::default::file:"${GITHUB_WORKSPACE}"/m2repo
      - name: Generate JaCoCo Badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2
        with:
          badges-directory: badges
          generate-branches-badge: true
          generate-summary: true
      - name: Log coverage percentage
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"
# jobs:
#   Builder-Docker-Image:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
#       - name: Build and export
#         uses: docker/build-push-action@v4
#         with:
#           context: builder/ubuntu/
#           tags: ${{ vars.ODL_BASE_IMAGE_NAME }}:latest
#           outputs: type=docker,dest=/tmp/${{ vars.ODL_BASE_IMAGE_NAME }}.tar
#       - name: Upload artifact
#         uses: actions/upload-artifact@v3
#         with:
#           name: ${{ vars.ODL_BASE_IMAGE_NAME }}
#           path: /tmp/${{ vars.ODL_BASE_IMAGE_NAME }}.tar

#   aaa:
#     runs-on: ubuntu-latest
#     needs: Builder-Docker-Image
#     steps:
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
#       - name: Download artifact
#         uses: actions/download-artifact@v3
#         with:
#           name: ${{ vars.ODL_BASE_IMAGE_NAME }}
#           path: /tmp
#       - name: Load image
#         run: |
#           docker load --input /tmp/${{ vars.ODL_BASE_IMAGE_NAME }}.tar
#       - name: Maven Build
#         run: |
#           docker run ${{ vars.ODL_BASE_IMAGE_NAME }}:latest bash -c 'git clone "https://github.com/opendaylight/aaa.git" && cd /aaa && mvn clean deploy'

#   yangtools:
#     runs-on: ubuntu-latest
#     needs: Builder-Docker-Image
#     steps:
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
#       - name: Download artifact
#         uses: actions/download-artifact@v3
#         with:
#           name: ${{ vars.ODL_BASE_IMAGE_NAME }}
#           path: /tmp
#       - name: Load image
#         run: |
#           docker load --input /tmp/${{ vars.ODL_BASE_IMAGE_NAME }}.tar
#       - name: Maven Build
#         run: docker run ${{ vars.ODL_BASE_IMAGE_NAME }}:latest bash -c 'git clone "https://github.com/opendaylight/yangtools.git" && cd /yangtools && mvn clean deploy'

#   integration-distribution:
#     runs-on: ubuntu-latest
#     needs: Builder-Docker-Image
#     steps:
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
#       - name: Download artifact
#         uses: actions/download-artifact@v3
#         with:
#           name: ${{ vars.ODL_BASE_IMAGE_NAME }}
#           path: /tmp
#       - name: Load image
#         run: |
#           docker load --input /tmp/${{ vars.ODL_BASE_IMAGE_NAME }}.tar
#       - name: Maven Build
#         run: docker run ${{ vars.ODL_BASE_IMAGE_NAME }}:latest bash -c 'git clone "https://git.opendaylight.org/gerrit/integration/distribution" && cd /distribution && mvn clean deploy'

#   serviceutils:
#     runs-on: ubuntu-latest
#     needs: Builder-Docker-Image
#     steps:
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
#       - name: Download artifact
#         uses: actions/download-artifact@v3
#         with:
#           name: ${{ vars.ODL_BASE_IMAGE_NAME }}
#           path: /tmp
#       - name: Load image
#         run: |
#           docker load --input /tmp/${{ vars.ODL_BASE_IMAGE_NAME }}.tar
#       - name: Maven Build
#         run: docker run ${{ vars.ODL_BASE_IMAGE_NAME }}:latest bash -c 'git clone "https://github.com/opendaylight/serviceutils.git" && cd /serviceutils && mvn clean deploy'

#   odlparent:
#     runs-on: ubuntu-latest
#     needs: Builder-Docker-Image
#     steps:
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
#       - name: Download artifact
#         uses: actions/download-artifact@v3
#         with:
#           name: ${{ vars.ODL_BASE_IMAGE_NAME }}
#           path: /tmp
#       - name: Load image
#         run: |
#           docker load --input /tmp/${{ vars.ODL_BASE_IMAGE_NAME }}.tar
#       - name: Maven Build
#         run: |
#           docker run ${{ vars.ODL_BASE_IMAGE_NAME }}:latest bash -c 'git clone "https://github.com/opendaylight/odlparent.git" && cd /odlparent && mvn clean deploy'

#   openflowplugin:
#     runs-on: ubuntu-latest
#     needs: Builder-Docker-Image
#     steps:
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
#       - name: Download artifact
#         uses: actions/download-artifact@v3
#         with:
#           name: ${{ vars.ODL_BASE_IMAGE_NAME }}
#           path: /tmp
#       - name: Load image
#         run: |
#           docker load --input /tmp/${{ vars.ODL_BASE_IMAGE_NAME }}.tar
#       - name: Maven Build
#         run: |
#           docker run ${{ vars.ODL_BASE_IMAGE_NAME }}:latest bash -c 'git clone "https://github.com/opendaylight/openflowplugin.git" && cd /openflowplugin && mvn clean deploy'

#   ovsdb:
#     runs-on: ubuntu-latest
#     needs: Builder-Docker-Image
#     steps:
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
#       - name: Download artifact
#         uses: actions/download-artifact@v3
#         with:
#           name: ${{ vars.ODL_BASE_IMAGE_NAME }}
#           path: /tmp
#       - name: Load image
#         run: |
#           docker load --input /tmp/${{ vars.ODL_BASE_IMAGE_NAME }}.tar
#       - name: Maven Build
#         run: |
#           docker run ${{ vars.ODL_BASE_IMAGE_NAME }}:latest bash -c 'git clone "https://github.com/opendaylight/ovsdb.git" && cd /ovsdb && mvn clean deploy'
